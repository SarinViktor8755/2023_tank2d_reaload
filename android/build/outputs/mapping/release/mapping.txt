# compiler: R8
# compiler_version: 3.2.74
# min_api: 24
# common_typos_disable
# {"id":"com.android.tools.r8.mapping","version":"2.0"}
# pg_map_id: 7103805
# pg_map_hash: SHA-256 71038059add1da84ca6d6bb26d9c12f507116aae991343564dc5582b653f8218
com.tanks_2d.Assets.AssetsManagerGame -> b.a:
    com.badlogic.gdx.assets.AssetManager assetManager -> b
    java.util.HashMap assets -> a
    java.lang.Object get(java.lang.String) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> b
    com.badlogic.gdx.assets.AssetManager loadAllAsseGame() -> c
    com.badlogic.gdx.assets.AssetManager loadAllAssetMenu() -> d
    void loadedAseets() -> e
com.tanks_2d.AudioEngine.AudioEngine -> c.a:
    com.badlogic.gdx.audio.Sound sound -> d
    com.badlogic.gdx.audio.Sound hi_warning -> a
    com.badlogic.gdx.audio.Sound pip1 -> b
    java.lang.Long idTower -> o
    java.lang.Long idTrack -> n
    com.badlogic.gdx.audio.Sound music_pause -> k
    com.badlogic.gdx.audio.Sound redy_for_action -> l
    com.badlogic.gdx.audio.Sound loose -> i
    com.badlogic.gdx.audio.Sound win -> j
    com.badlogic.gdx.audio.Sound explosion -> g
    boolean SondOn -> q
    com.badlogic.gdx.audio.Sound fight -> h
    boolean MusicOn -> r
    com.badlogic.gdx.audio.Sound track -> e
    boolean Vibration -> s
    com.badlogic.gdx.audio.Sound tower -> f
    com.tanks_2d.MainGame mainGaming -> c
    com.badlogic.gdx.audio.Sound pip -> m
    long pause_music_id -> t
    float timer_towr_ratation -> p
    com.badlogic.gdx.math.Vector2 tempV -> u
    void Vibration(float) -> a
    void Vibration(int) -> b
    float countVolmeDistantion(float,float,float,float) -> c
    boolean isPause() -> d
    void playMusicPaseMenu() -> e
    void pleySoundKickExplosion(float,float,float,float) -> f
    void pleySoundKickStick(float,float,float,float) -> g
    void pleySoundOfTower() -> h
    void pleySoundOfTracks() -> i
    void pley_alarm_hit() -> j
    void pley_fight_ad_sound() -> k
    void pley_lose_ad_sound() -> l
    void pley_pip() -> m
    void pley_win_ad_sound() -> n
    void rady_for_action() -> o
    void stopMusicPaseMenu() -> p
    void stopSoundOfTower() -> q
    void stopSoundOfTracks() -> r
    void update_volme_pause(float) -> s
com.tanks_2d.CameraGame -> a.a:
    com.tanks_2d.Units.Tanks.OpponentsTanks targetCamera -> a
    float zoom -> j
    com.badlogic.gdx.utils.viewport.FillViewport viewport -> c
    int wl -> h
    int dw -> i
    com.badlogic.gdx.graphics.OrthographicCamera camera -> b
    int hl -> g
    int sizeMap -> e
    boolean floatCamera -> d
    com.badlogic.gdx.math.Vector2 targetPoint -> f
    void createNewTargetDeathRhim(com.tanks_2d.Units.Tanks.OpponentsTanks) -> a
    void deathStatus(com.tanks_2d.Units.Tanks.Tank) -> b
    void fixBounds() -> c
    com.badlogic.gdx.graphics.OrthographicCamera getCamera() -> d
    com.badlogic.gdx.math.Vector3 getCameraPosition() -> e
    com.badlogic.gdx.utils.viewport.FillViewport getViewport() -> f
    void integrationCamera() -> g
    void interatorCamera() -> h
    void jampCameraToPoint(float,float) -> i
    void moveFloatCameraToPoint(float,float,float) -> j
    void setTargetCamera(com.tanks_2d.Units.Tanks.OpponentsTanks) -> k
com.tanks_2d.InputProcessor.InputProcessorDesktop -> d.a:
    com.tanks_2d.Screens.GamePlayScreen gps -> a
    com.badlogic.gdx.math.Vector2 velocity -> b
com.tanks_2d.Locations.Collision.BoxCollision -> f.a:
    com.badlogic.gdx.math.Vector2 center -> c
    com.badlogic.gdx.math.Vector2 lb -> a
    com.badlogic.gdx.math.Vector2 ru -> b
    void getCenter() -> a
    com.badlogic.gdx.math.Vector2 getLb() -> b
    com.badlogic.gdx.math.Vector2 getRu() -> c
    boolean isCollisionTank(com.badlogic.gdx.math.Vector2) -> d
com.tanks_2d.Locations.Collision.CircleCollision -> f.b:
    com.badlogic.gdx.math.Vector2 circule -> a
    float getRadiusKV -> c
    float radius -> b
    boolean isCollisionCircle(com.badlogic.gdx.math.Vector2) -> a
com.tanks_2d.Locations.Collision.MainCollision -> f.c:
    com.tanks_2d.Screens.GamePlayScreen gsp -> a
    com.badlogic.gdx.math.Vector2 tempVector -> b
    java.util.ArrayList circle -> d
    java.util.ArrayList box -> c
    void addCircleeMapObject(com.badlogic.gdx.math.Vector2,float) -> a
    void addRectangleMapObject(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> b
    com.badlogic.gdx.math.Vector2 isCircleCircle(com.badlogic.gdx.math.Vector2) -> c
    com.badlogic.gdx.math.Vector2 isCollisionsRectangle(com.badlogic.gdx.math.Vector2) -> d
    void isCollisionsRectangleReturnPosition(com.badlogic.gdx.math.Vector2) -> e
com.tanks_2d.Locations.Crater -> e.a:
com.tanks_2d.Locations.GameSpace -> e.b:
    com.tanks_2d.Screens.GamePlayScreen gps -> a
    com.badlogic.gdx.maps.tiled.TiledMap map -> e
    int WITH_LOCATION -> h
    int HEIHT_LOCATION -> i
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer decorations -> k
    com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer rendererMap -> f
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer ground -> l
    com.tanks_2d.Locations.Collision.MainCollision mainCollision -> m
    com.tanks_2d.Locations.MapsList mapsList -> b
    com.badlogic.gdx.math.Vector2 rasp1 -> c
    com.badlogic.gdx.math.Vector2 rasp2 -> d
    com.badlogic.gdx.maps.MapLayer obstacles -> j
    com.tanks_2d.Locations.Radspurens radspurens -> g
    void addSled(float,float,float) -> a
    boolean checkMapBordersReturnSpaceTank(com.badlogic.gdx.math.Vector2) -> b
    void clear_map_particel() -> c
    com.tanks_2d.Screens.GamePlayScreen getGps() -> d
    com.tanks_2d.Locations.Collision.MainCollision getMainCollision() -> e
    com.tanks_2d.Locations.Radspurens getRadspurens() -> f
    com.badlogic.gdx.math.Vector2 getRasp1() -> g
    com.badlogic.gdx.math.Vector2 getRasp2() -> h
    int getSizeLocationPixel() -> i
    boolean inPointLocation(float,float) -> j
    void loadMap() -> k
    void renderSpace(com.badlogic.gdx.graphics.OrthographicCamera) -> l
    void setMapDesetrt(java.lang.String) -> m
com.tanks_2d.Locations.MapsList -> e.c:
    java.util.ArrayList mapsList -> a
com.tanks_2d.Locations.RadspurenTank -> e.d:
    float timer -> d
    boolean life -> e
    float aligbDeg -> c
    float yp -> b
    float xp -> a
com.tanks_2d.Locations.Radspurens -> e.e:
    com.badlogic.gdx.graphics.Texture crater -> d
    com.badlogic.gdx.graphics.Texture sled -> c
    java.util.ArrayDeque listRadspurens -> a
    java.util.ArrayDeque listCrater -> b
    void addCrater(float,float,float) -> a
    void addRadspurenTank(float,float,float) -> b
    void clearCrater() -> c
    void clearRadspurens() -> d
    void randerCrater(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> e
    void randerRadspurens(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> f
com.tanks_2d.MainGame -> a.b:
    com.tanks_2d.Screens.PauseScreen.PauseScreen pauseScreen -> e
    byte flagChangeScreen -> i
    int status -> l
    com.tanks_2d.AudioEngine.AudioEngine audioEngine -> a
    float hu -> h
    float hb -> g
    java.lang.String nik_name -> j
    boolean ANDROID -> k
    com.badlogic.gdx.Screen mainMenu -> f
    com.tanks_2d.ClientNetWork.MainClient mainClient -> c
    com.tanks_2d.Assets.AssetsManagerGame assetsManagerGame -> b
    com.tanks_2d.Screens.GamePlayScreen gamePlayScreen -> d
    float convert_percentage_pixels(float,boolean) -> a
    void count_the_edges_of_the_screen() -> b
    com.tanks_2d.Assets.AssetsManagerGame getAMG() -> c
    byte getFlagChangeScreen() -> d
    com.tanks_2d.Screens.GamePlayScreen getGamePlayScreen() -> e
    com.tanks_2d.ClientNetWork.MainClient getMainClient() -> f
    float get_percentage_of_proportions(float,float) -> g
    void goGameForPause() -> h
    void goMenuForPause() -> i
    boolean isMainMenuScreen() -> j
    boolean isPause() -> k
    void setFlagChangeScreen(byte) -> l
    void startGameMPley() -> m
    void startGameSPley() -> n
    void startPauseScreen() -> o
    void startPauseScreen(float) -> p
    void updateClien() -> q
com.tanks_2d.ParticleEffect.Explosion_Death -> g.a:
    com.badlogic.gdx.math.Vector2 position -> a
    float kefm -> d
    float time_life -> b
    int nom_texture -> c
    float getKefm() -> a
    java.lang.String getNameTextureRegion() -> b
    com.badlogic.gdx.math.Vector2 getPosition() -> c
    float getTime_life() -> d
    boolean isLife() -> e
    void setParameters(float,float) -> f
    void setParameters(float,float,float) -> g
    void update() -> h
com.tanks_2d.ParticleEffect.Garbage -> g.b:
    com.badlogic.gdx.math.Vector2 pos -> a
    com.badlogic.gdx.math.Vector2 velocity -> b
    float temperature -> e
    float rot -> d
    float timeLife -> c
    com.badlogic.gdx.math.Vector2 getPos() -> a
    boolean isLife() -> b
    void setParametors(float,float) -> c
    void setParametors(float,float,float,float) -> d
    void upDate() -> e
com.tanks_2d.ParticleEffect.ParticleCustum -> g.c:
    java.util.ArrayDeque smoke_elements -> h
    java.util.ArrayDeque pasricalDeathSmokes -> i
    java.util.ArrayDeque flying_stereo_elements_bases -> j
    java.util.ArrayDeque point_of_fires -> k
    com.badlogic.gdx.math.Vector2 temp_V -> l
    com.tanks_2d.Screens.GamePlayScreen gps -> t
    com.badlogic.gdx.graphics.g2d.SpriteBatch sb -> m
    java.util.ArrayDeque shardsArr -> d
    com.badlogic.gdx.graphics.Texture f -> o
    com.badlogic.gdx.graphics.g2d.TextureAtlas textureAtlasDeathExplosion -> r
    java.util.ArrayDeque explosion_Death -> e
    com.badlogic.gdx.graphics.Texture t -> n
    java.util.ArrayDeque explosion_Death_little -> f
    java.util.ArrayDeque falling_elements -> g
    com.badlogic.gdx.graphics.Texture explosion_ring -> s
    java.util.ArrayDeque particleDeque -> a
    java.util.ArrayDeque pasricalExplosions -> b
    com.badlogic.gdx.graphics.Texture shardsTex -> q
    java.util.ArrayDeque pasricalExplosionsBigParam -> c
    com.badlogic.gdx.graphics.Texture iron -> p
    void addAnimationDeath(float,float) -> a
    void addParticalsSmokeOneBullet(float,float) -> b
    void addParticalsSmokeStereo(float,float,float) -> c
    void addPasricalDeath(float,float) -> d
    void addPasricalDeath_little(float,float,float) -> e
    void addShares(float,float) -> f
    void addShares(float,float,float,float) -> g
    void add_Point_of_fire(float,float) -> h
    void add_flying_stereo_elements_bases(float,float,float,float,float,com.badlogic.gdx.graphics.Texture,float,float,float,float) -> i
    boolean checkViseble(float,float) -> j
    void generatorSmoke(float,float,float) -> k
    com.badlogic.gdx.graphics.Texture getT() -> l
    void randerGarbage(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> m
    void rander_explosion_Death() -> n
    void rander_explosion_Death_little() -> o
    void rander_flying_stereo_elements_bases() -> p
    void rander_particleDeque() -> q
    void rander_point_of_fires(float) -> r
    void rander_smoke_death(com.badlogic.gdx.graphics.g2d.SpriteBatch,float) -> s
    void render(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> t
com.tanks_2d.ParticleEffect.ParticleSmoke -> g.d:
    com.badlogic.gdx.math.Vector2 velocity -> d
    com.badlogic.gdx.math.Vector2 position -> a
    boolean live -> i
    float scalingKef -> g
    com.badlogic.gdx.graphics.Color color -> h
    float time_life -> f
    float rotate -> e
    float scale -> c
    float rotation -> b
    com.badlogic.gdx.graphics.Color getColor() -> a
    com.badlogic.gdx.math.Vector2 getPosition() -> b
    float getRotation() -> c
    float getScale() -> d
    float getTime_life() -> e
    boolean isLife() -> f
    void setAlpha(float) -> g
    void setParameters(float,float,float,float,float,float,float,float,float,float,float,float,float) -> h
    void update() -> i
com.tanks_2d.ParticleEffect.PasricalExplosion -> g.e:
    com.badlogic.gdx.math.Vector2 position -> a
    float rot -> e
    float time_life -> d
    float baseScale -> c
    float startTimeMax -> b
com.tanks_2d.ParticleEffect.PasricalExplosionBigParameter -> g.f:
    com.badlogic.gdx.math.Vector2 position -> a
    float baseTimeLife -> g
    float alpha -> e
    float rot -> d
    int par -> f
    float time_life -> c
    float baseScale -> b
com.tanks_2d.ParticleEffect.Shard -> g.g:
com.tanks_2d.ParticleEffect.StereoSmoke.Falling_element -> h.a:
    com.badlogic.gdx.graphics.Color color -> e
    float hi -> i
    float wi -> h
    com.badlogic.gdx.math.Vector3 position -> a
    float dy -> g
    float dx -> f
    float align -> d
    float speed -> c
    com.badlogic.gdx.graphics.Texture texture -> b
    boolean checkLimet() -> a
    void rander(float,com.badlogic.gdx.graphics.Camera,com.badlogic.gdx.graphics.g2d.SpriteBatch) -> b
    void update(float,com.badlogic.gdx.graphics.Camera) -> c
com.tanks_2d.ParticleEffect.StereoSmoke.Flying_stereo_elements_base -> h.b:
    float deltaCamera -> j
    com.badlogic.gdx.graphics.Color color -> f
    float scale -> i
    float dy -> h
    com.badlogic.gdx.math.Vector3 position -> a
    float dx -> g
    float align -> e
    com.badlogic.gdx.graphics.g2d.SpriteBatch spriteBatch -> c
    float speed -> d
    com.badlogic.gdx.graphics.Texture texture -> b
    void add(float,float,float,float,float,com.badlogic.gdx.graphics.Texture,float,float,float,float) -> a
    boolean checkLimet() -> b
    void rander(float,com.badlogic.gdx.graphics.Camera) -> c
    void update(float,com.badlogic.gdx.graphics.Camera) -> d
com.tanks_2d.ParticleEffect.StereoSmoke.PasricalDeathSmoke -> h.c:
    boolean checkLimet() -> a
    void update(float,com.badlogic.gdx.graphics.Camera) -> c
com.tanks_2d.ParticleEffect.StereoSmoke.Point_of_fire -> h.d:
    com.badlogic.gdx.graphics.Texture tex -> e
    com.tanks_2d.ParticleEffect.ParticleCustum pc -> f
    float y -> d
    float x -> c
    float time_life -> b
    float lifetime_initial -> a
    void generateSmoke() -> a
    boolean isLive() -> b
    void setParametors(float,float,float) -> c
    void update(float) -> d
com.tanks_2d.ParticleEffect.StereoSmoke.Smoke_element -> h.e:
    void update(float,com.badlogic.gdx.graphics.Camera) -> c
com.tanks_2d.Screens.Controll.Banner -> j.a:
    com.badlogic.gdx.graphics.Texture failed -> g
    com.badlogic.gdx.graphics.Texture victory -> f
    com.badlogic.gdx.graphics.Texture feature -> e
    com.tanks_2d.AudioEngine.AudioEngine ae -> j
    com.badlogic.gdx.graphics.Texture beck_graund -> i
    com.badlogic.gdx.graphics.Texture temp_texture -> h
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> d
    float timeLife -> a
    java.util.ArrayList q -> c
    boolean flag_sound -> b
    void addBaner(int) -> a
    void delBanner() -> b
    boolean isWorking() -> c
    void rander(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> d
    void update() -> e
com.tanks_2d.Screens.Controll.Controller -> j.b:
    com.badlogic.gdx.scenes.scene2d.ui.Label score_red -> q
    com.badlogic.gdx.scenes.scene2d.ui.Label timer -> u
    com.badlogic.gdx.graphics.Texture feature -> z
    boolean finalAd -> J
    com.badlogic.gdx.scenes.scene2d.ui.Label live_score_blue -> s
    float fr -> F
    com.badlogic.gdx.graphics.Texture track -> x
    com.badlogic.gdx.math.Vector2 temp_Point -> j
    com.tanks_2d.Screens.GamePlayScreen gamePlayScreen -> w
    com.badlogic.gdx.graphics.Texture failed -> B
    com.badlogic.gdx.scenes.scene2d.ui.Image pointStick -> o
    com.badlogic.gdx.scenes.scene2d.ui.Image attacButton -> m
    com.tanks_2d.Screens.Controll.Banner banner -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image changingGoal -> k
    boolean contollerOn -> E
    boolean attackButon -> f
    com.badlogic.gdx.graphics.OrthographicCamera cam -> d
    boolean chance -> h
    boolean buttonChangingOpponent -> C
    com.badlogic.gdx.scenes.scene2d.ui.Label live_score_red -> r
    com.badlogic.gdx.scenes.scene2d.ui.Label labelHP -> p
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> v
    float time_in_game -> I
    float fb -> G
    com.badlogic.gdx.scenes.scene2d.Stage stage -> c
    com.badlogic.gdx.graphics.Texture fith -> y
    com.badlogic.gdx.scenes.scene2d.ui.Label my_frag -> t
    com.badlogic.gdx.math.Vector2 distance -> i
    int frag -> D
    com.badlogic.gdx.math.Vector2 directionMovement -> H
    com.badlogic.gdx.graphics.Texture victory -> A
    com.badlogic.gdx.scenes.scene2d.ui.Image voiceButtonImg -> n
    com.badlogic.gdx.scenes.scene2d.ui.Image stick -> l
    com.badlogic.gdx.utils.viewport.Viewport viewport -> b
    boolean inTuchMove -> e
    boolean voiceButton -> g
    void setLive_score_blue(int) -> A
    void setLive_score_red(int) -> B
    void setTime_in_game(float) -> C
    void update() -> D
    void updateCotrollerFinalAd() -> E
    boolean access$002(com.tanks_2d.Screens.Controll.Controller,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Image access$100(com.tanks_2d.Screens.Controll.Controller) -> b
    void access$200(com.tanks_2d.Screens.Controll.Controller,com.badlogic.gdx.scenes.scene2d.ui.Image) -> c
    com.badlogic.gdx.math.Vector2 access$300(com.tanks_2d.Screens.Controll.Controller) -> d
    boolean access$402(com.tanks_2d.Screens.Controll.Controller,boolean) -> e
    boolean access$502(com.tanks_2d.Screens.Controll.Controller,boolean) -> f
    com.badlogic.gdx.scenes.scene2d.ui.Label access$600(com.tanks_2d.Screens.Controll.Controller) -> g
    float access$700(com.tanks_2d.Screens.Controll.Controller) -> h
    boolean access$802(com.tanks_2d.Screens.Controll.Controller,boolean) -> i
    void addBannerFeiath() -> j
    void addBannerLOUSER() -> k
    void addBannerWiner() -> l
    void draw(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> m
    java.lang.String format_time(int) -> n
    com.badlogic.gdx.math.Vector2 getDirectionMovement() -> o
    boolean isAttackButon() -> p
    boolean isChance() -> q
    boolean isInTuchMove() -> r
    void randerGUI(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> s
    void resetPoint(com.badlogic.gdx.scenes.scene2d.ui.Image) -> t
    void setButtonChangingOpponent(boolean) -> u
    void setChance(boolean) -> v
    void setContollerOn(boolean) -> w
    void setFb(float) -> x
    void setFr(float) -> y
    void setHPHeroTank(int) -> z
com.tanks_2d.Screens.Controll.Controller$1 -> j.b$a:
    com.tanks_2d.Screens.Controll.Controller this$0 -> a
com.tanks_2d.Screens.Controll.Controller$2 -> j.b$b:
    com.tanks_2d.Screens.Controll.Controller this$0 -> a
com.tanks_2d.Screens.Controll.Controller$3 -> j.b$c:
    com.tanks_2d.Screens.Controll.Controller this$0 -> a
com.tanks_2d.Screens.Controll.Controller$4 -> j.b$d:
    com.tanks_2d.Screens.Controll.Controller this$0 -> a
com.tanks_2d.Screens.GamePlayScreen -> i.a:
    int score_red_command -> n
    int live_blue_command -> o
    int score_blue_command -> m
    com.tanks_2d.Units.Tanks.Tank tank -> i
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> c
    float timeInGame -> d
    com.tanks_2d.ParticleEffect.ParticleCustum pc -> l
    com.badlogic.gdx.math.Vector2 pos -> j
    com.tanks_2d.Units.Bullets bullets -> k
    com.tanks_2d.shaders.Shaders s -> r
    com.tanks_2d.CameraGame cameraGame -> b
    com.tanks_2d.InputProcessor.InputProcessorDesktop inputProcessorPC -> g
    com.tanks_2d.MainGame mainGame -> a
    com.tanks_2d.Units.Tanks.TanksOther tanksOther -> q
    com.tanks_2d.AudioEngine.AudioEngine audioEngine -> f
    com.tanks_2d.Locations.GameSpace gameSpace -> e
    com.tanks_2d.Screens.Controll.Controller controller -> h
    int live_red_command -> p
    com.tanks_2d.Assets.AssetsManagerGame getAMG() -> a
    com.tanks_2d.AudioEngine.AudioEngine getAudioEngine() -> b
    com.badlogic.gdx.graphics.g2d.SpriteBatch getBatch() -> c
    com.tanks_2d.Units.Bullets getBullets() -> d
    com.tanks_2d.CameraGame getCameraGame() -> e
    com.tanks_2d.Screens.Controll.Controller getController() -> f
    com.tanks_2d.Locations.GameSpace getGameSpace() -> g
    int getLive_blue_command() -> h
    int getLive_red_command() -> i
    com.tanks_2d.MainGame getMainGame() -> j
    com.tanks_2d.ParticleEffect.ParticleCustum getPc() -> k
    com.tanks_2d.shaders.Shaders getS() -> l
    com.tanks_2d.Units.Tanks.Tank getTank() -> m
    com.tanks_2d.Units.Tanks.TanksOther getTanksOther() -> n
    float getTimeInGame() -> o
    void playAnimation(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,int) -> p
    void playExplosion(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> q
    void setLive_blue_command(int) -> r
    void setLive_red_command(int) -> s
    void startFlashForMainTank() -> t
    void update() -> u
com.tanks_2d.Screens.MenuScreen -> i.b:
    boolean startgameSP -> m
    float timerStartGame -> k
    float timeInScreen -> j
    com.badlogic.gdx.scenes.scene2d.ui.TextButton textButton -> r
    com.badlogic.gdx.utils.FloatArray dummyArray -> v
    boolean startgameMP -> l
    boolean button_start_click -> u
    com.badlogic.gdx.scenes.scene2d.Stage stageMenu -> o
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> b
    com.tanks_2d.ClientNetWork.MainClient mainClient -> e
    com.badlogic.gdx.scenes.scene2d.ui.Label statusConnetct -> n
    com.badlogic.gdx.graphics.Texture wallpaper1 -> g
    java.lang.String limit -> w
    com.badlogic.gdx.graphics.Texture wallpaper -> f
    com.tanks_2d.MainGame mainGame -> a
    com.badlogic.gdx.utils.viewport.StretchViewport viewport -> c
    com.badlogic.gdx.scenes.scene2d.ui.Skin textEditer -> q
    float red_alha -> x
    com.badlogic.gdx.scenes.scene2d.ui.Skin skinMenu -> p
    com.badlogic.gdx.graphics.Texture disconnect -> i
    com.badlogic.gdx.graphics.Texture logo -> h
    com.badlogic.gdx.graphics.OrthographicCamera camera -> d
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox checkBoxMusic -> s
    com.badlogic.gdx.scenes.scene2d.ui.CheckBox checkBoxSound -> t
    boolean access$000(com.tanks_2d.Screens.MenuScreen) -> a
    boolean access$002(com.tanks_2d.Screens.MenuScreen,boolean) -> b
    com.tanks_2d.ClientNetWork.MainClient access$100(com.tanks_2d.Screens.MenuScreen) -> c
    boolean access$202(com.tanks_2d.Screens.MenuScreen,boolean) -> d
    void check_screen_flag() -> e
    void red_alpha_update() -> f
    void upDateScreen() -> g
com.tanks_2d.Screens.MenuScreen$1 -> i.b$a:
    com.tanks_2d.MainGame val$mainGame -> a
    com.badlogic.gdx.scenes.scene2d.ui.TextField val$textField -> b
    com.tanks_2d.Screens.MenuScreen this$0 -> c
com.tanks_2d.Screens.PauseScreen.DataPlyerStatistic -> k.a:
    int id -> f
    int coomand -> g
    java.lang.String nik -> a
    int damage_caused -> d
    int score -> e
    int frag -> b
    int death -> c
com.tanks_2d.Screens.PauseScreen.PauseScreen -> k.b:
    float final_time -> h
    float timeInScreen -> g
    com.badlogic.gdx.graphics.g2d.BitmapFont textFont -> m
    java.lang.String game_statistics_players -> n
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> b
    com.tanks_2d.ClientNetWork.MainClient mainClient -> e
    java.util.ArrayList dataPlyerStatistics -> o
    com.tanks_2d.MainGame mainGame -> a
    com.badlogic.gdx.utils.viewport.StretchViewport viewport -> c
    com.badlogic.gdx.graphics.Texture tb -> k
    com.badlogic.gdx.graphics.Texture f_bw -> j
    com.badlogic.gdx.graphics.Texture f -> i
    com.tanks_2d.AudioEngine.AudioEngine audioEngine -> f
    com.badlogic.gdx.graphics.OrthographicCamera camera -> d
    com.tanks_2d.Screens.PauseScreen.TableResult tableResult -> l
    java.lang.String convertStringLeft(java.lang.String,int) -> a
    float getAlpha() -> b
    java.util.ArrayList getDataPlyerStatistics() -> c
    java.lang.String getGame_statistics_players() -> d
    float getWith() -> e
    void parser_result() -> f
    void setGame_statistics_players(java.lang.String) -> g
    void update() -> h
com.tanks_2d.Screens.PauseScreen.TableResult -> k.c:
    com.badlogic.gdx.scenes.scene2d.ui.Skin skinMenu -> c
    com.badlogic.gdx.scenes.scene2d.ui.Label nameLabel -> d
    com.badlogic.gdx.scenes.scene2d.ui.Table table -> a
    com.badlogic.gdx.scenes.scene2d.Stage stage -> b
    void generate_table() -> a
com.tanks_2d.Units.BulletPool.Bullet -> m.a:
    com.badlogic.gdx.math.Vector2 position -> a
    com.badlogic.gdx.math.Vector2 direction -> b
    float timeLife -> e
    int coomand -> d
    int namber -> c
    void fireBullet(float,float,float,float,int,int) -> a
    float getTimeLife() -> b
    void update(float) -> c
com.tanks_2d.Units.BulletPool.BulletPool -> m.b:
    com.tanks_2d.Units.BulletPool.Bullet newObject() -> a
com.tanks_2d.Units.Bullets -> l.a:
    com.tanks_2d.Units.BulletPool.BulletPool bp -> c
    int MAX_distribution_smoke -> d
    com.badlogic.gdx.utils.Array activeBullets -> b
    com.tanks_2d.Screens.GamePlayScreen gpl -> e
    com.badlogic.gdx.graphics.Texture img -> a
    void addBullet(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,int) -> a
    boolean checkingGoingAbroad(float,float) -> b
    void randerBullets(float) -> c
    com.badlogic.gdx.math.Vector2 removeBullet(int) -> d
    void removeBullet(com.tanks_2d.Units.BulletPool.Bullet) -> e
com.tanks_2d.Units.NikName -> l.b:
    java.lang.String genirateTokk() -> a
    java.lang.String getNikName() -> b
    java.lang.String getTokken() -> c
    void setNikName(java.lang.String) -> d
com.tanks_2d.Units.Tanks.OpponentsTanks -> n.a:
    float SPEED -> j
    float SPEED_ROTATION -> i
    int hp -> m
    int nomder -> h
    com.badlogic.gdx.math.Vector2 temp_delta -> k
    java.lang.String nikPlayer -> o
    float color -> a
    com.badlogic.gdx.math.Vector2 directionMovementControll -> e
    com.badlogic.gdx.math.Vector2 direction_tower -> f
    com.badlogic.gdx.math.Vector2 position -> c
    com.badlogic.gdx.math.Vector2 direction -> d
    com.tanks_2d.Screens.GamePlayScreen gsp -> l
    com.tanks_2d.Units.Tanks.TowerRotation towerRotation -> g
    java.lang.Integer command -> n
    boolean move -> b
    float getColor() -> a
    java.lang.Integer getCommand() -> b
    com.badlogic.gdx.math.Vector2 getDirection() -> c
    com.badlogic.gdx.math.Vector2 getDirection_tower() -> d
    java.lang.String getNikPlayer() -> e
    int getNomder() -> f
    com.badlogic.gdx.math.Vector2 getPosition() -> g
    boolean isCollisionsTanks(com.badlogic.gdx.math.Vector2) -> h
    boolean isLive() -> i
    void setLive(float) -> j
    void setNikPlayer(java.lang.String) -> k
com.tanks_2d.Units.Tanks.Tank -> n.b:
    com.badlogic.gdx.math.Vector2 deltaSledVec -> t
    float g -> B
    com.badlogic.gdx.math.Vector2 DEATH_VECTOR -> E
    com.badlogic.gdx.graphics.g2d.SpriteBatch sb -> f
    com.badlogic.gdx.math.Vector2 direction -> c
    com.badlogic.gdx.graphics.Texture img -> g
    com.badlogic.gdx.graphics.Texture imgB2 -> k
    com.badlogic.gdx.graphics.Texture img2 -> i
    float SPEED -> u
    com.badlogic.gdx.graphics.Texture target -> o
    float deltaSled -> s
    com.badlogic.gdx.graphics.Texture body -> m
    float raz -> q
    com.badlogic.gdx.math.Vector2 point_respown_red -> z
    boolean banner_feith -> C
    com.tanks_2d.Screens.GamePlayScreen gsp -> a
    java.lang.Integer my_Command -> G
    int rt -> F
    com.tanks_2d.Units.Tanks.TowerRotation tr -> w
    float time_life -> A
    boolean rot -> r
    com.badlogic.gdx.math.Vector2 direction_tower -> e
    com.badlogic.gdx.math.Vector2 targetCoordinat -> d
    com.badlogic.gdx.math.Vector2 position -> b
    com.badlogic.gdx.graphics.Texture imgB -> j
    float SPEED_ROTATION -> v
    int hp -> x
    com.badlogic.gdx.graphics.Texture img_1 -> h
    com.badlogic.gdx.graphics.Texture towers -> n
    com.badlogic.gdx.math.Vector2 point_respown_blue -> y
    com.badlogic.gdx.graphics.Texture img_1B -> l
    com.badlogic.gdx.graphics.Texture target_guidance -> p
    boolean banner_death -> D
    void tower_sec() -> A
    void upDateHpHud() -> B
    void update(com.badlogic.gdx.math.Vector2,boolean) -> C
    void banner_feith() -> a
    void collisinCircleTrue() -> b
    void collisinOtherTanksTrue() -> c
    void collisinRectangleTrue() -> d
    void flashing_tank() -> e
    int generateCommand() -> f
    void generatorSled() -> g
    void generatorSmoke() -> h
    com.badlogic.gdx.math.Vector2 getDirection_tower() -> i
    com.tanks_2d.Screens.GamePlayScreen getGsp() -> j
    int getHp() -> k
    java.lang.Integer getMy_Command() -> l
    com.badlogic.gdx.math.Vector2 getPosition() -> m
    void getTargetCamera() -> n
    void getTargetCamera(com.badlogic.gdx.math.Vector2) -> o
    float getTime_Tackt() -> p
    com.tanks_2d.Units.Tanks.TowerRotation getTr() -> q
    boolean isLive() -> r
    void moveMainTank(com.badlogic.gdx.math.Vector2,boolean) -> s
    boolean redyToAttack() -> t
    void renderTank(com.badlogic.gdx.math.Vector2,boolean) -> u
    void replace_textures() -> v
    void respownTank() -> w
    void rotation_the_tower(com.badlogic.gdx.math.Vector2) -> x
    void send_my_coordinat() -> y
    void setHp(int) -> z
com.tanks_2d.Units.Tanks.TanksOther -> n.c:
    com.badlogic.gdx.math.Vector2 tRotation -> o
    com.badlogic.gdx.math.Vector2 temp -> n
    java.util.HashMap listOpponents -> b
    java.util.HashMap deltaSledVec -> d
    java.util.HashMap listSled -> c
    com.badlogic.gdx.graphics.Texture img_1 -> g
    com.badlogic.gdx.graphics.Texture img -> f
    com.badlogic.gdx.graphics.Texture imgB2 -> k
    com.badlogic.gdx.graphics.Texture img2 -> j
    com.badlogic.gdx.graphics.Texture img_1B -> i
    com.badlogic.gdx.graphics.Texture imgB -> h
    com.badlogic.gdx.graphics.Texture tower -> m
    com.badlogic.gdx.graphics.Texture b -> l
    com.badlogic.gdx.graphics.g2d.BitmapFont textFont -> a
    com.tanks_2d.Screens.GamePlayScreen gsp -> e
    void addSled(com.tanks_2d.Units.Tanks.OpponentsTanks) -> a
    void count_living() -> b
    int createOponent(float,float,int,float) -> c
    void delPlayer(int) -> d
    boolean getExists(int) -> e
    com.tanks_2d.Units.Tanks.OpponentsTanks getRandomPlayer() -> f
    com.tanks_2d.Units.Tanks.OpponentsTanks getTankForID(int) -> g
    com.badlogic.gdx.math.Vector2 isCollisionsTanks(com.badlogic.gdx.math.Vector2) -> h
    void print_nickname(com.badlogic.gdx.graphics.g2d.SpriteBatch,com.tanks_2d.Units.Tanks.OpponentsTanks) -> i
    void randerOtherTanks(com.badlogic.gdx.graphics.g2d.SpriteBatch) -> j
    void send_all_layer_live_100_hp() -> k
    void setTankPosition(com.tanks_2d.ClientNetWork.Network$PleyerPositionNom,java.lang.Boolean) -> l
    void updateColor(com.tanks_2d.Units.Tanks.OpponentsTanks,float) -> m
com.tanks_2d.Units.Tanks.TowerRotation -> n.d:
    java.lang.Integer nomTarget -> f
    int myCommand -> j
    boolean rotation -> k
    boolean guidance -> l
    java.util.HashMap targetTreet -> b
    float timerTackt -> d
    com.badlogic.gdx.math.Vector2 myPosition -> i
    int target_tank -> e
    com.badlogic.gdx.math.Vector2 direction -> g
    com.badlogic.gdx.math.Vector2 direction_tower -> h
    java.util.HashMap listOpponents -> c
    boolean pip_song -> a
    float rast_to_target -> m
    boolean changeCommand() -> a
    void changeTarget() -> b
    void changeTarget(int) -> c
    boolean checkLen() -> d
    int getAnTower() -> e
    java.lang.Integer getNomTarget() -> f
    int getTargetSize() -> g
    float getTimerTackt() -> h
    boolean isGuidance() -> i
    boolean isRedyToAttac() -> j
    boolean isRotation() -> k
    void makingDecisionTower(float) -> l
    float returnAngle(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> m
    java.lang.Integer selectTarget() -> n
    void setRotation(boolean) -> o
    void targetDetectionTower(com.badlogic.gdx.math.Vector2) -> p
    void turningTower(float,float) -> q
    void update(float) -> r
com.tanks_2d.Utils.VectorUtils -> o.a:
    com.badlogic.gdx.math.Vector2 tempVector2 -> a
    com.badlogic.gdx.math.Vector2 tempVector1 -> b
    com.badlogic.gdx.math.Vector3 tempVector3 -> c
    float getLen2(com.badlogic.gdx.math.Vector2,float,float) -> a
    float getLen2(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> b
com.tanks_2d.shaders.Shaders -> p.a:
    float timer -> a
    com.badlogic.gdx.graphics.g2d.SpriteBatch spriteBatch -> b
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> c
    com.badlogic.gdx.graphics.glutils.ShaderProgram getShader() -> a
    void minus(float) -> b
    void updateShader() -> c
org.objenesis.instantiator.ObjectInstantiator -> q.a:
org.objenesis.strategy.InstantiatorStrategy -> r.a:
